
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import skfuzzy as fuzz 
from skfuzzy import control as ctrl
from tqdm.auto import tqdm

def fuzzy_Maturacao(input_df,**kwargs):
    
        debug = kwargs.get('debug',False) 
        trust = kwargs.get('trust','COT') 

        
        if trust not in ['COT','IH']:
            print(f'Você forneceu a opção "trust={trust}" que não é reconhecida.')
            return 

        # creating output_df
        output_df = input_df
        
       
        of_nclass = 7
        of_class = ['A','AB','B','BC','C','CD','D']
        
        
        if trust == 'COT':
            of_RE_nclass = 4
            of_RE_class = ['BC+','CD+++','CD++','CD+']
            of_RE_alter = ['BC','CD','CD','CD']
        elif trust == 'IH':
            of_RE_nclass = 4
            of_RE_class = ['B-','B--','BC--','C-']        
            of_RE_alter = ['B','B','BC','C']

        
        toc_nclass = 3
        toc_class = ['low','high','very high']
        toc_class_bounds = [[0,1],
                        [1,3],
                        [3,20]]
        
        #
        hi_nclass = 7
        hi_class = ['ultra low','very low','low','intermediate','high','very high','ultra high']
        hi_class_bounds = [[0,50],
                    [50,125],
                    [125,250],
                    [250,400],
                    [400,650],
                    [650,850],
                    [850,1500]]

       
        oi_nclass = 7
        oi_class =  ['ultra low','very low','low','mid low','mid high','mid wide','wide']
        oi_class_bounds = [[10,30],
                    [20,50],
                    [30,80],
                    [40,80],
                    [50,150],
                    [40,150],
                    [20,200]]
        
        
        oi_RE_nclass = 3
        oi_RE_class =  ['low','mid wide','high']
        oi_RE_class_bounds = [[10,80],
                            [40,150],
                            [120,200]]   
        

        
        dtoc = 0.5
        dhi = 1
        doi = 1

        TOC = ctrl.Antecedent(np.arange(np.min(toc_class_bounds),np.max(toc_class_bounds), dtoc),'COT')
        HI = ctrl.Antecedent(np.arange(np.min(hi_class_bounds),np.max(hi_class_bounds), dhi),'IH')
        OI = ctrl.Antecedent(np.arange(np.min(oi_class_bounds),np.max(oi_class_bounds), doi),'IO')
        OI_RE = ctrl.Antecedent(np.arange(np.min(oi_RE_class_bounds),np.max(oi_RE_class_bounds), doi),'oi_re')
        
        # Consequents
        Organic_Facies = ctrl.Consequent(np.arange(0, of_nclass + 1, 1), 'of')
        Organic_Facies_RE = ctrl.Consequent(np.arange(0, of_nclass + 1, 1), 'of_re')

        
        for ii,tclass in enumerate(toc_class):
            
            if ii == 0:
                TOC[tclass] = fuzz.trapmf(TOC.universe, [np.min(toc_class_bounds),
                                                toc_class_bounds[ii][0],
                                                toc_class_bounds[ii][1],
                                                toc_class_bounds[ii+1][0]])
            elif ii == len(toc_class)-1:
                TOC[tclass] = fuzz.trapmf(TOC.universe, [toc_class_bounds[ii-1][1],
                                                toc_class_bounds[ii][0],
                                                toc_class_bounds[ii][1],
                                                np.max(toc_class_bounds)])
            else:
                TOC[tclass] = fuzz.trapmf(TOC.universe, [toc_class_bounds[ii-1][1],
                                                toc_class_bounds[ii][0],
                                                toc_class_bounds[ii][1],
                                                toc_class_bounds[ii+1][0]])
        
        for ii,hiclass in enumerate(hi_class):
            
            if ii == 0:
                HI[hiclass] = fuzz.trapmf(HI.universe, [np.min(hi_class_bounds),
                                                hi_class_bounds[ii][0],
                                                hi_class_bounds[ii][1],
                                                np.mean(hi_class_bounds[ii+1][:])])
            elif ii == len(hi_class)-1:
                HI[hiclass] = fuzz.trapmf(HI.universe, [np.mean(hi_class_bounds[ii-1][:]),
                                                hi_class_bounds[ii][0],
                                                hi_class_bounds[ii][1],
                                                np.max(hi_class_bounds)])
            else:
                HI[hiclass] = fuzz.trapmf(HI.universe, [np.mean(hi_class_bounds[ii-1][:]),
                                                hi_class_bounds[ii][0],
                                                hi_class_bounds[ii][1],
                                                np.mean(hi_class_bounds[ii+1][:])])
        
        
        
        
        for ii,oiclass in enumerate(oi_class):
            
            OI[oiclass] = fuzz.gaussmf(OI.universe,np.mean(oi_class_bounds[ii][:]),
                                            np.std(oi_class_bounds[ii][:]))

        for ii,oiREclass in enumerate(oi_RE_class):
            #
            OI_RE[oiREclass] = fuzz.gaussmf(OI_RE.universe,np.mean(oi_RE_class_bounds[ii][:]),
                                            np.std(oi_RE_class_bounds[ii][:]))
            
       
        for ii,ofclass in enumerate(of_class):
            
            Organic_Facies[ofclass] = fuzz.trimf(Organic_Facies.universe,[ii-1,ii,ii+1])
        
        for ii,ofREclass in enumerate(of_RE_class):
            
            Organic_Facies_RE[ofREclass] = fuzz.trimf(Organic_Facies_RE.universe,[ii-1,ii,ii+1])


        # FUZZY rules   

        rule1 = ctrl.Rule(TOC['very high'] & HI['ultra high'] & OI['ultra low'], Organic_Facies['A']) 
        rule2 = ctrl.Rule(TOC['very high'] & HI['very high'] & OI['very low'], Organic_Facies['AB'])
        rule3 = ctrl.Rule(TOC['very high'] & HI['high'] & OI['low'], Organic_Facies['B'])
        rule4 = ctrl.Rule(TOC['high'] & HI['intermediate'] & OI['mid low'], Organic_Facies['BC'])
        rule5 = ctrl.Rule(TOC['high'] & HI['low'] & OI['mid high'], Organic_Facies['C'])
        rule6 = ctrl.Rule(TOC['low'] & HI['very low'] & OI['mid wide'], Organic_Facies['CD'])
        rule7 = ctrl.Rule(TOC['low'] & HI['ultra low'] & OI['wide'], Organic_Facies['D'])
        
        
        
        if trust=='COT':
            rule8 = ctrl.Rule(TOC['high'] & HI['high'] & OI_RE['low'], Organic_Facies_RE['BC+'])
            rule9 = ctrl.Rule(TOC['low'] & HI['high'] & OI_RE['low'], Organic_Facies_RE['CD+++'])
            rule10 = ctrl.Rule(TOC['low'] & HI['intermediate'] & OI_RE['mid wide'], Organic_Facies_RE['CD++'])
            rule11 = ctrl.Rule(TOC['low'] & HI['low'] & OI_RE['high'], Organic_Facies_RE['CD+'])
        elif trust=='IH':
            rule8 = ctrl.Rule(TOC['high'] & HI['high'] & OI_RE['low'], Organic_Facies_RE['B-'])
            rule9 = ctrl.Rule(TOC['low'] & HI['high'] & OI_RE['low'], Organic_Facies_RE['B--'])
            rule10 = ctrl.Rule(TOC['low'] & HI['intermediate'] & OI_RE['mid wide'], Organic_Facies_RE['BC--'])
            rule11 = ctrl.Rule(TOC['low'] & HI['low'] & OI_RE['high'], Organic_Facies_RE['C-'])       

        maturation_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, \
                                            rule5, rule6, rule7])
        
        maturation_ctrl_RE = ctrl.ControlSystem([rule8, rule9, rule10, rule11])
        
        # driver fuzzy 
        maturation_apply = ctrl.ControlSystemSimulation(maturation_ctrl)
        maturation_apply_RE = ctrl.ControlSystemSimulation(maturation_ctrl_RE)

        # loop 
        output_df = output_df.assign(of=-99.0)
        output_df = output_df.assign(of_class='??')
        output_df = output_df.assign(quality='erro')
        output_df = output_df.assign(observ='erro de entrada')

        
        for index,row in tqdm(input_df.iterrows(),total=len(input_df)):
            #
            if row.COT < np.min(toc_class_bounds) or row.COT >np.max(toc_class_bounds):
                print(f'***aviso: toc fora dos limites Profundidade:{row.Profundidade} inputs:[{row.COT:.2f}:{row.IH:4.0f}:{row.IO:4.0f}]')
            if row.IH < np.min(hi_class_bounds) or row.IH >np.max(hi_class_bounds):
                print(f'***aviso: hi fora dos limites Profundidade:{row.Profundidade} inputs:[{row.COT:.2f}:{row.IH:4.0f}:{row.IO:4.0f}]')
            if row.IO < np.min(oi_class_bounds) or row.IO >np.max(oi_class_bounds):
                print(f'***aviso: oi fora dos limites Profundidade:{row.Profundidade} inputs:[{row.COT:.2f}:{row.IH:4.0f}:{row.IO:4.0f}]')
            maturation_apply.inputs({'COT': float(row.COT),'IH': float(row.IH),'IO': float(row.IO)})
            maturation_apply_RE.inputs({'COT': float(row.COT),'IH': float(row.IH),'oi_re': float(row.IO)})
            
            try:
                maturation_apply.compute()
                
                
                output_df.loc[index,'of'] = round(maturation_apply.output["of"],2)
                
                ii_class = np.rint(maturation_apply.output["of"]) 
                
                output_df.loc[index,'of_class'] = of_class[int(ii_class)]
                output_df.loc[index,'quality'] = 'bom'
                output_df.loc[index,'observ'] = ''
                
            except:
                try:
                    maturation_apply_RE.compute()
                    
                    
                    output_df.loc[index,'of'] = round(maturation_apply_RE.output["of_re"],2)
                    
                    ii_class = np.rint(maturation_apply_RE.output["of_re"]) 
                    output_df.loc[index,'of_class'] = of_RE_alter[int(ii_class)]
                    output_df.loc[index,'quality'] = f'cautela'
                    output_df.loc[index,'observ'] = f'cautela {of_RE_class[int(ii_class)]}'
                
                except:
                
                    
                    print(f' Erro de defuzzing (RECLASS) no índice:{index} Profundidade:{row.Profundidade:.2f} m')
                
                if debug:
                    print(f'Debugging...',end='')
                    atclass = ''
                    ahiclass = ''
                    aoiclass = ''
                    
                    for ii,tclass in enumerate(toc_class):
                        if row.COT >= toc_class_bounds[ii][0] and row.COT <= toc_class_bounds[ii][1]:
                            atclass = f'{atclass}|{tclass}'
                    atclass = f'{atclass}|'
                            
                    for ii,hiclass in enumerate(hi_class):
                        if row.IH >= hi_class_bounds[ii][0] and row.IH <= hi_class_bounds[ii][1]:
                            ahiclass = f'{ahiclass}|{hiclass}'
                    ahiclass = f'{ahiclass}|'
                            
                    for ii,oiclass in enumerate(oi_RE_class):
                        if row.IO >= oi_RE_class_bounds[ii][0] and row.IO <= oi_RE_class_bounds[ii][1]:
                            aoiclass = f'{aoiclass}|{oiclass}'
                    aoiclass = f'{aoiclass}|'
                    
                    print(f'COT:{row.COT:.3f} COT_class {atclass} '
                        f'IH {row.IH:.1f} IH_class {ahiclass} '
                        f'IO {row.IO:.1f} IO_class {aoiclass} ')
        return output_df
